{"version":3,"file":"static/js/829.a45bef9d.chunk.js","mappings":"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","sources":["constants/localeStorage.ts","components/NewRequest/NewRequest.styled.ts","components/NewRequest/NewRequest.tsx","pages/AddEdit/AddEdit.tsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["export const LOCALE_STORAGE_KEY = 'vacations';\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const NewRequestFormStyled = styled(Form)`\n  padding: 20px;\n  margin-top: 50px;\n  display: flex;\n  /* align-items: stretch; */\n  flex-direction: column;\n  width: 1000px;\n  margin: 0 auto;\n  /* justify-content: space-between; */\n`;\n\nexport const InputContainer = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 30px;\n`;\n\nexport const NotesInputContainer = styled.div`\n  position: relative;\n  display: flex;\n  margin-left: 150px;\n  flex-direction: column;\n  margin-bottom: 30px;\n`;\n\nexport const Input = styled(Field)`\n  color: darkblue;\n  font-size: 16px;\n  background: #ffffff;\n  border: 2px solid #cacaca;\n  border-radius: 5px;\n  line-height: 25px;\n  padding: 10px 15px;\n  width: 300px;\n  outline: none;\n  &:focus {\n    color: teal;\n    border: 2px solid #000;\n  }\n`;\n\nexport const NotesInput = styled(Field)`\n  display: block;\n  width: 400px;\n  height: 300px;\n  color: darkblue;\n  font-size: 16px;\n  background: #ffffff;\n  border: 2px solid #cacaca;\n  border-radius: 5px;\n  line-height: 25px;\n  padding: 10px 15px;\n  outline: none;\n  &:focus {\n    color: teal;\n    border: 2px solid #000;\n  }\n`;\n\nexport const Label = styled.label`\n  margin-bottom: 20px;\n  width: 300px;\n`;\n\nexport const ErrorMessage = styled.p`\n  color: tomato;\n  width: 300px;\n  position: absolute;\n  top: 75px;\n`;\n\nexport const Button = styled.button`\n  cursor: pointer;\n  padding: 10px 35px;\n  width: 200px;\n  margin: 0 auto;\n  margin-top: 20px;\n  background-color: lightblue;\n  color: black;\n  border-radius: 10px;\n  font-size: 20px;\n  &:hover,\n  &:focus {\n    background-color: beige;\n  }\n  transition: background-color 300ms ease;\n`;\n\nexport const NewRequestContainer = styled.div`\n  display: flex;\n`;\n","import { FC } from 'react';\nimport { nanoid } from 'nanoid';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  NewRequestFormStyled,\n  Input,\n  Label,\n  ErrorMessage,\n  InputContainer,\n  Button,\n  NewRequestContainer,\n  NotesInput,\n  NotesInputContainer,\n} from './NewRequest.styled';\nimport { LOCALE_STORAGE_KEY } from 'constants/localeStorage';\n\nconst NewRequestSchema = Yup.object().shape({\n  vacationType: Yup.string().required('Required'),\n  startDate: Yup.string().required('Required'),\n  endDate: Yup.string().required('Required'),\n  note: Yup.string(),\n});\n\ninterface NewRequestFormValues {\n  vacationType: string;\n  startDate: string;\n  endDate: string;\n  note: string;\n}\n\nconst NewRequest: FC = () => {\n  const navigate = useNavigate();\n\n  const vacations = JSON.parse(\n    localStorage.getItem(LOCALE_STORAGE_KEY) || '[]'\n  );\n\n  const initialValues: NewRequestFormValues = {\n    vacationType: '',\n    startDate: '',\n    endDate: '',\n    note: '',\n  };\n\n  const handleSubmit = (values: NewRequestFormValues) => {\n    const vacation = {\n      id: nanoid(),\n      vacationType: values.vacationType,\n      startDate: values.startDate,\n      endDate: values.endDate,\n      note: values.note,\n    };\n    vacations.push(vacation);\n    localStorage.setItem(LOCALE_STORAGE_KEY, JSON.stringify(vacations));\n    navigate('/');\n  };\n\n  return (\n    <Formik\n      validationSchema={NewRequestSchema}\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n    >\n      {({ errors, touched }) => (\n        <NewRequestFormStyled>\n          <NewRequestContainer>\n            <div>\n              <InputContainer>\n                <Label htmlFor=\"vacationType\">Vacation type</Label>\n                <Input\n                  id=\"vacationType\"\n                  name=\"vacationType\"\n                  placeholder=\"Vacation type\"\n                />\n                {errors.vacationType && touched.vacationType ? (\n                  <ErrorMessage>{errors.vacationType}</ErrorMessage>\n                ) : null}\n              </InputContainer>\n              <InputContainer>\n                <Label htmlFor=\"startDate\">Start date</Label>\n                <Input\n                  id=\"startDate\"\n                  name=\"startDate\"\n                  placeholder=\"Start date\"\n                />\n                {errors.startDate && touched.startDate ? (\n                  <ErrorMessage>{errors.startDate}</ErrorMessage>\n                ) : null}\n              </InputContainer>\n              <InputContainer>\n                <Label htmlFor=\"endDate\">End date</Label>\n                <Input id=\"endDate\" name=\"endDate\" placeholder=\"End date\" />\n                {errors.endDate && touched.endDate ? (\n                  <ErrorMessage>{errors.endDate}</ErrorMessage>\n                ) : null}\n              </InputContainer>\n            </div>\n            <NotesInputContainer>\n              <Label htmlFor=\"note\">Notes</Label>\n              <NotesInput id=\"note\" name=\"note\" placeholder=\"Note\" />\n              {errors.note && touched.note ? (\n                <ErrorMessage>{errors.note}</ErrorMessage>\n              ) : null}\n            </NotesInputContainer>\n          </NewRequestContainer>\n          <Button type=\"submit\">Save</Button>\n        </NewRequestFormStyled>\n      )}\n    </Formik>\n  );\n};\n\nexport default NewRequest;\n","import { FC } from 'react';\nimport Container from 'components/Container';\nimport NewRequest from 'components/NewRequest';\n\nconst AddEdit: FC = () => {\n  return (\n    <Container>\n      <NewRequest />\n    </Container>\n  );\n};\n\nexport default AddEdit;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["LOCALE_STORAGE_KEY","NewRequestFormStyled","styled","Form","InputContainer","NotesInputContainer","Input","Field","NotesInput","Label","ErrorMessage","Button","NewRequestContainer","NewRequestSchema","Yup","shape","vacationType","required","startDate","endDate","note","navigate","useNavigate","vacations","JSON","parse","localStorage","getItem","validationSchema","initialValues","onSubmit","values","vacation","id","nanoid","push","setItem","stringify","errors","touched","htmlFor","name","placeholder","type","Container","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}